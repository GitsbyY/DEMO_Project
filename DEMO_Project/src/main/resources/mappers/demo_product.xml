<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 큰 패키지 이름과 같다 -->
<mapper namespace="com.demo.product">

<!-- 	만약에 DB와 DTO가 동일하다면, resultMap은 필요없다 -->
			<!-- 타입은 클래스  		xml에서 쓸 수 있는 아이디-->
	<resultMap type="memberDto" id="memberResultMap">
<!-- 	id는 PK를 말한다 -->
		<id column="MNO" property="no" />
		<result column="MNAME" property="name" />
		<result column="EMAIL" property="email" />
		<result column="PWD" property="password" />
<!-- 	날짜는 자바의 타입으로 맞춰줘야한다. -->
		<result column="CRE_DATE" property="createDate"
			javaType="java.util.Date" />
		<result column="MOD_DATE" property="modifyDate" 
			javaType="java.util.Date" />
	</resultMap>
<!-- 			메서드를 말한다. 리턴타입이 중요하다. 여기서는 LIST라서 여러 개 저장이 된다. -->
<!-- 	<select id="memberSelectList" parameterType="map" -->
<!-- 		resultMap="memberResultMap"> -->
<!-- 		SELECT MNO, MNAME, EMAIL, CRE_DATE -->
<!-- 		FROM MEMBER -->
<!-- 		ORDER BY MNO DESC -->
<!-- 	</select> -->
	
	<select id="memberSelectList" parameterType="map"
		resultMap="memberResultMap">
		SELECT MEMBER.MNO, MNAME, EMAIL, CRE_DATE
		FROM (  
				SELECT ROWNUM AS RNUM, M.mno, M.email, M.mname, M.cre_date
       	 		FROM (  
       	 				SELECT MNO, MNAME, EMAIL, CRE_DATE
                		FROM member
                		ORDER BY CRE_DATE DESC) M
     		 ) MEMBER
		WHERE MEMBER.RNUM BETWEEN #{start} AND #{end}
	</select>

	<select id="memberExist" parameterType="map"
		resultMap="memberResultMap">
		SELECT MNAME, EMAIL
		FROM MEMBER
		WHERE EMAIL = #{email} AND PWD = #{pwd}
	</select>
<!-- 	paramMap의 키 값을 가져오는 형식이 #{}이다. -->
	
	<insert id="memberInsertOne" parameterType="memberDto"
		useGeneratedKeys="true" keyProperty="no"> <!-- 키 값을 생성하는데 사용한다. -->
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			SELECT MEMBERS_MNO_SEQ.NEXTVAL
			FROM DUAL
		</selectKey>
		
		INSERT INTO MEMBER
		(MNO, EMAIL, PWD, MNAME, CRE_DATE, MOD_DATE)
		VALUES(#{no}, #{email}, #{password}, #{name}, SYSDATE, SYSDATE)
		
	</insert>
	
	<select id="memberSelectOne" parameterType="int"
		resultMap="memberResultMap">
		SELECT MNO, MNAME, EMAIL, CRE_DATE
		FROM MEMBER
		WHERE MNO = #{no}
	</select>
	
	<update id="memberUpdateOne" parameterType="memberDto">
		UPDATE MEMBER
<!-- 		다이나믹 쿼리를 실행 할 수 있는 마이바티스의 문법이 set이다 -->
<!-- 		sql에서 update는 set이 있어야 하는데 <set>으로 대체한 것이다. -->
		<set>
<!-- 			여기의 변수는 DTO의 파라메터 타입 -->
			<if test="name != null">MNAME = #{name},</if>
			<if test="email != null">EMAIL = #{email},</if>
			MOD_DATE = SYSDATE
		</set>
		WHERE MNO = #{no}
	</update>
	
	<delete id="memberDeleteOne" parameterType="int">
		DELETE FROM MEMBER
		WHERE MNO = #{no}
	</delete>
	
	<select id="memberSelectTotalCount" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM MEMBER
	</select>
	
	<insert id="insertFile" parameterType="map">
	
	INSERT INTO TB_FILE
		(IDX, PARENT_SEQ, ORIGINAL_FILE_NAME, STORED_FILE_NAME, FILE_SIZE, CRE_DATE)
	VALUES
		(TB_FILE_IDX_SEQ.NEXTVAL, #{parentSeq}, #{original_file_name}, 
		#{stored_file_name}, #{file_size}, SYSDATE)
	
	</insert>
	
	<select id="fileSelectList" parameterType="int" resultType="map">
		SELECT IDX, ORIGINAL_FILE_NAME, STORED_FILE_NAME
			, ROUND(FILE_SIZE/1024, 1) AS FILE_SIZE
		FROM TB_FILE
		WHERE PARENT_SEQ = #{no}
	</select>
	
	
	<select id="fileSelectStoredFileName" parameterType="int"
		resultType="map">
		SELECT IDX, STORED_FILE_NAME
		FROM TB_FILE
		WHERE PARENT_SEQ = #{parentSeq}
	</select>
	
	<delete id="fileDelete" parameterType="int">
		DELETE FROM TB_FILE
		WHERE PARENT_SEQ = #{no}
	</delete>
	
</mapper>



